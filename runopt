#!/usr/bin/env sh

# Set max time the compiler should optimize
MAXTIME=600
# Init STARTTIME with current runtime of the script
STARTTIME=$SECONDS

# Get project directory
case "$(uname -s)" in
   Darwin)
     SCRIPT_PATH=$(greadlink -f "$0")
     ;;

   *)
     SCRIPT_PATH=$(readlink -f "$0")
     ;;
esac

PROJECT_DIR=$(dirname "$SCRIPT_PATH")

# Check if more or less than the file is given
if [[ $# != 1 ]]; 
# if yes, just invoke compiler and redirect flags
then
# use the script generated by Gradle (does all the relative-path-magic for the dependencies)
$PROJECT_DIR/build_dir/install/minijavac/bin/minijavac $@

# if only the file is given, run compiler with different optimization levels
else 
# TimeLeft = Max Runtime - (Duration)
TIMELEFT=$(( MAXTIME - (SECONDS - STARTTIME)))
echo "Time left: $TIMELEFT seconds. Run compiler with flag -O 0"
# run compiler without optimization
$PROJECT_DIR/build_dir/install/minijavac/bin/minijavac -O 0 $1


TIMELEFT=$(( MAXTIME - (SECONDS - STARTTIME)))
echo "Time left: $TIMELEFT seconds. Run compiler with flag -O 1"
# run compiler with optimization level 1
$PROJECT_DIR/build_dir/install/minijavac/bin/minijavac -O 1 $1


TIMELEFT=$(( MAXTIME - (SECONDS - STARTTIME)))
echo "Time left: $TIMELEFT seconds. Run compiler with flag -O 2"
# run compiler with optimization level 2
$PROJECT_DIR/build_dir/install/minijavac/bin/minijavac -O 2 $1


TIMELEFT=$(( MAXTIME - (SECONDS - STARTTIME)))
echo "Time left: $TIMELEFT seconds. Run compiler with flag -O 3"
# run compiler with optimization level 3
$PROJECT_DIR/build_dir/install/minijavac/bin/minijavac -O 3 $1
fi