plugins {
    id 'com.github.sherter.google-java-format' version '0.5'
}

apply plugin: 'application'

mainClassName = "minijava.Main"

// policy is to have a 'build' script; that requires us to have a non-default build directory
buildDir = 'build_dir'

repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

googleJavaFormat {
    toolVersion '1.1'
    include 'src'
}

project(':jFirm') {
    apply plugin: 'java'
    ant.importBuild('build.xml') { antTargetName ->
        'ant-' + antTargetName // ant tasks are available as gradle task with prefix 'ant-'
    }
    sourceSets.main.java.srcDirs = [ant.properties.src]
    repositories { jcenter() }
    dependencies { compile 'net.java.dev.jna:jna:3.2.7' }
}

project(':libfirm') {
    task make(type: Exec) {
        commandLine 'make'
    }
    task clean(type: Exec) {
        commandLine 'make', 'clean'
    }
    rootProject.ext.nativeLibDir = "$projectDir/build/debug"
}
[tasks.run, tasks.installDist, tasks.assemble].each {
    it.dependsOn 'libfirm:make'
}
applicationDefaultJvmArgs = ["-Djna.library.path=$nativeLibDir"]
tasks.withType(Test) {
    it.dependsOn 'libfirm:make'
    systemProperty 'jna.library.path', nativeLibDir
}

project(':mjtest') {
    task all(type: Exec, dependsOn: installDist) {
        commandLine 'python3', './mjt.py', 'all', '../run', '--ci_testing', '--parallel'
    }
    task compileFirm(type: Exec, dependsOn: installDist) {
        commandLine 'python3', './mjt.py', 'compile-firm', '../run', '--ci_testing', '--parallel'
    }
    task exec(type: Exec, dependsOn: installDist) {
        commandLine 'python3', './mjt.py', 'exec', '../run', '--ci_testing', '--parallel'
    }
    task failing(type: Exec, dependsOn: installDist) {
        commandLine 'python3', './mjt.py', 'all', '../run', '--ci_testing', '--parallel', '--only_incorrect_tests'
    }
}
tasks.check.dependsOn 'mjtest:all'

dependencies {
    compile project(':jFirm')
    compile 'com.beust:jcommander:1.58'
    compile 'com.google.guava:guava:19.0'
    compile 'commons-io:commons-io:2.4'
    compile 'com.intellij:annotations:5.1'
    compile 'org.jooq:jool:0.9.9'
    compile 'org.pcollections:pcollections:2.1.2'
    testCompile 'com.github.npathai:hamcrest-optional:1.0'
    testCompile 'com.pholser:junit-quickcheck-core:0.6.1'
    testCompile 'com.pholser:junit-quickcheck-generators:0.6.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'com.google.jimfs:jimfs:1.1'
    testCompile 'com.googlecode.java-diff-utils:diffutils:1.3.0'
}

task installGitHooks(type: Copy) {
    from file('git-hooks/pre-commit')
    into { file('.git/hooks') }
}
